# Binaries generated with the following script:
#    https://github.com/mendersoftware/mender-convert-integration-scripts/blob/master/build-uboot-rpi.sh

RASPBERRYPI_BINARIES="${RASPBERRYPI_CONFIG}-2020.01.tar.gz"
RASPBERRYPI_BINARIES_URL="${MENDER_STORAGE_URL}/mender-convert/uboot/raspberrypi/${RASPBERRYPI_BINARIES}"

RASPBERRYPI_OS_NEEDS_32BIT="y"

source configs/raspberrypi/include/common_config
source configs/raspberrypi/uboot/include/common_config

function raspberrypi_32_setup_bootloader_and_kernel() {
    # Ubuntu Server images actually use U-boot by default on RPi3 and the
    # layout is slightly different on the boot partition. That is why we need
    # additional logic here to determine what we are converting.
    if [ -e work/boot/uboot_rpi_4_32b.bin ] && [ -e work/boot/vmlinuz ]; then
        RASPBERRYPI_KERNEL_IMAGE="vmlinuz"
        RASPBERRYPI_BOOTLOADER_IMAGE="uboot_rpi_4_32b.bin"
    elif [ -e work/boot/uboot.bin ] && [ -e work/boot/vmlinuz ]; then
        RASPBERRYPI_KERNEL_IMAGE="vmlinuz"
        RASPBERRYPI_BOOTLOADER_IMAGE="uboot.bin"
    else
        RASPBERRYPI_BOOTLOADER_IMAGE="${RASPBERRYPI_KERNEL_IMAGE}"
    fi

    # Extract Linux kernel and install to /boot directory on rootfs if it doesn't already exist.
    # If it already exists, the input image is likely already converted so we just want to use
    # the existing kernel image.
    if [ ! -f "work/rootfs/boot/${MENDER_KERNEL_IMAGETYPE}" ]; then
        run_and_log_cmd "sudo cp work/boot/${RASPBERRYPI_KERNEL_IMAGE} work/rootfs/boot/${MENDER_KERNEL_IMAGETYPE}"
    fi

    # Make sure the on-board bootloader boots our bootloader (which we do via the kernel option).
    sed -i -e '/^kernel=/d' work/boot/config.txt
    echo "kernel=${RASPBERRYPI_BOOTLOADER_IMAGE}" >> work/boot/config.txt

    # Replace kernel with U-boot and add boot script
    run_and_log_cmd "sudo cp work/rpi/binaries/u-boot.bin work/boot/${RASPBERRYPI_BOOTLOADER_IMAGE}"
    run_and_log_cmd "sudo cp work/rpi/binaries/boot.scr work/boot"
    run_and_log_cmd "sudo cp work/rpi/binaries/fw_env.config work/rootfs/etc/"
    run_and_log_cmd "sudo cp work/rpi/binaries/uboot-git-log.txt work/boot"

    # Disable 64-bit mode and force 32-bit mode. Even though we check for 32-bit binaries at the
    # start of this function, some images use a 64-bit kernel even with 32-bit userspace. Due to our
    # custom U-Boot bootloader we need to stick to 32-bit for now.
    if ! grep -q '^arm_64bit=0' work/boot/config.txt; then
        log_info "Forcing 32-bit kernel"
        sed -i -e '/^arm_64bit=/d' work/boot/config.txt
        echo "arm_64bit=0" >> work/boot/config.txt
    fi

    raspberrypi_generic_bootloader_setup
}

function raspberrypi_32_platform_modify() {
    raspberrypi_check_requirements

    check_and_extract_asset $RASPBERRYPI_BINARIES $RASPBERRYPI_BINARIES_URL

    raspberrypi_update_cmdline

    raspberrypi_32_setup_bootloader_and_kernel

    raspberrypi_adjust_services
}
